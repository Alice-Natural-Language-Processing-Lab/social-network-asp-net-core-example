@using SocialNetwork.Services
@using SocialNetwork.Services.SocialNetwork.Services
@using SocialNetwork.Web.Constants
@model SocialNetwork.Web.ViewModels.HomeViewModel

<div class="col-md-offset-2 col-md-7">
    <form id="new-post-form">
        <div class="form-group">
            <label class="control-label" for="form-text">Create new post</label>
            <textarea class="form-control" id="form-text" name="text"></textarea>
        </div>
        <div class="form-group">
            <button class="btn btn-primary btn-submit" name="submit" type="button">Post</button>
        </div>
    </form>

    <br />
    <br />
    <br />

    <div id="posts-list">
        @foreach (var post in Model.Posts)
        {
            @Html.Partial("_Post", post)
        }
    </div>

</div>

@Html.Partial("JS/AjaxCalls")
@Html.Partial("JS/postActionHandlers")

@section scripts {
    <script src="~/lib/signalr.js"></script>

    <script>

        var ajaxCalls = ajaxCalls()
        var postActionHandlers = postActionHandlers(ajaxCalls, setPostViewIntoEditingState)

        var connection = new signalR.HubConnection('/posts');
        var postsCount = $('.post').length
        
        connection.on('@PostEvent.PostPublished.ToString()', function (postHtml){
            var id = $(postHtml).attr('id')
            $('#posts-list').prepend(postHtml)
            setHandlersForPost($('#' + id))
            postsCount++;
        })

        connection.on('@PostEvent.PostChanged.ToString()', function (newPostHtml){
            var postId = $(newPostHtml).attr('id')
            var oldPostHtml = $('#' + postId)
            oldPostHtml.replaceWith(newPostHtml)
            setHandlersForPost($('#' + postId))
        })

        connection.on('@PostEvent.PostDeleted.ToString()', function (postId){
            var postHtml = $('#posts-list ' + ' #post-' + postId)
            postHtml.remove()
            postsCount--;
        })

        connection.start()

        function setPostViewIntoEditingState(postId) {
            var $post = $('#post-' + postId)

            // replaceParagraphWithTextArea
            var $postParagraph = $post.find('.post-text')
            var postParagraphWidth = $postParagraph.css('width')
            var postText = $postParagraph.text();
            $postParagraph.replaceWith('<textarea>' + postText + "</textarea>")
            var $postTextArea = $post.find('textarea')
            $postTextArea.css('width', postParagraphWidth)

            // setEditingButtons
            var $list = $post.find('ul');
            $list.find('.control-btn').remove()

            var doneBtnHtml =
                '<li class="control-btn control-btn-done-editing">' + 
                    '<span>' + 
                    '<button class="btn btn-primary">Done</button>' + 
                    '</span>' + 
                 '</li>';

            $list.append(doneBtnHtml)
            var $doneBtn = $list.find('.control-btn-done-editing');

            return function(callback) {
                $doneBtn.click(function() {
                    callback($postTextArea.val())
                })
            }
        }

        onScrollToBottom(function() {
            ajaxCalls.loadMorePosts(5, postsCount, function(data) {
                data.forEach(function(postHtml) {
                    var id = $(postHtml).attr('id')
                    $('#posts-list').append(postHtml)
                    setHandlersForPost($('#' + id))
                    postsCount++
                })
            })
        })

        $("#new-post-form .btn-submit").click(function() {
            var $form = $('#new-post-form')
            var $textArea = $form.find('#form-text')
            var postText = $textArea.val()

            postActionHandlers.onPublish(postText, function() {
                $textArea.val('')
            })
        })

        var allPosts = $('.post')
        allPosts.each(function (i) {
            var $post = $(allPosts[i])
            setHandlersForPost($post)
        })

        function setHandlersForPost($post) {

            $post.find('.control-btn-edit').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onEdit(postId)
            })

            $post.find('.control-btn-delete').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onDelete(postId)
            })

            $post.find('.control-btn-like').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onLike(postId)
            })

            $post.find('.control-btn-dislike').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onDislike(postId)
            })

            $post.find('.control-btn-unlike').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onUnLike(postId)
            })

            $post.find('.control-btn-undislike').click(function (e) {
                var $postRoot = $(e.currentTarget).parents().eq(3)
                var postId = $postRoot.attr('id').replace('post-', '')
                postActionHandlers.onUnDislike(postId)
            })
        }

    </script>

}